import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell, LineChart, Line, ResponsiveContainer } from 'recharts';
import './App.css';

// Mock data for demonstration when backend is not running
const mockSatellites = [
  {
    name: "Persi",
    languages: ["Python", "JavaScript", "TypeScript", "Java", "CSharp"],
    enabled: true
  }
];

const mockReport = `# Analysis Report: Persi Python Satellite
## Generated: 2025-10-31T08:20:00.000000

### Satellite Status
- **Watcher**: Persi
- **Language**: Python
- **Status**: Analysis Complete
- **Files Analyzed**: 1

### Summary
Automated analysis and report generation completed successfully.

### Next Steps
- Review generated reports
- Sync with GitHub if needed
- Deactivate satellite when done

---
*Generated by Workflow Engine*
`;

function App() {
  const [satellites, setSatellites] = useState([]);
  const [selectedSatellite, setSelectedSatellite] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState('');
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Mock data for charts
  const languageData = [
    { name: 'Python', files: 45, reports: 12 },
    { name: 'JavaScript', files: 32, reports: 8 },
    { name: 'TypeScript', files: 28, reports: 6 },
    { name: 'Java', files: 15, reports: 4 },
    { name: 'C#', files: 10, reports: 2 }
  ];

  const statusData = [
    { name: 'Active', value: 75, color: '#28a745' },
    { name: 'Inactive', value: 25, color: '#dc3545' }
  ];

  const timelineData = [
    { date: '2025-01', reports: 4 },
    { date: '2025-02', reports: 7 },
    { date: '2025-03', reports: 12 },
    { date: '2025-04', reports: 8 },
    { date: '2025-05', reports: 15 },
    { date: '2025-06', reports: 22 }
  ];

  useEffect(() => {
    fetchSatellites();
  }, []);

  const fetchSatellites = async () => {
    try {
      const response = await axios.get('http://localhost:8000/satellites');
      setSatellites(response.data);
    } catch (err) {
      // Fallback to mock data when backend is not running
      console.warn('Backend not available, using mock data:', err.message);
      setSatellites(mockSatellites);
    }
  };

  const generateReport = async () => {
    if (!selectedSatellite || !selectedLanguage) {
      setError('Please select both satellite and language');
      return;
    }

    setLoading(true);
    setError('');
    try {
      const response = await axios.post('http://localhost:8000/reports/generate', {
        satellite: selectedSatellite,
        language: selectedLanguage
      });
      setReport(response.data);
    } catch (err) {
      // Fallback to mock report when backend is not running
      console.warn('Backend not available, using mock report:', err.message);
      setReport({
        satellite: selectedSatellite,
        language: selectedLanguage,
        status: "Analysis Complete",
        file_count: 1,
        timestamp: new Date().toISOString(),
        content: mockReport.replace('Persi Python Satellite', `${selectedSatellite} ${selectedLanguage} Satellite`)
      });
    } finally {
      setLoading(false);
    }
  };

  const generateAllReports = async () => {
    setLoading(true);
    setError('');
    try {
      await axios.post('http://localhost:8000/reports/generate-all');
      alert('All reports generated successfully!');
      // Refresh satellites data
      fetchSatellites();
    } catch (err) {
      // Fallback when backend is not running
      console.warn('Backend not available, simulating report generation:', err.message);
      alert('All reports generated successfully! (Mock mode)');
      fetchSatellites();
    } finally {
      setLoading(false);
    }
  };

  const handleSatelliteChange = (satelliteName) => {
    setSelectedSatellite(satelliteName);
    setSelectedLanguage('');
    setReport(null);
  };

  const currentSatellite = satellites.find(s => s.name === selectedSatellite);

  return (
    <div className="App">
      <header className="App-header">
        <h1>Team Persia Reports</h1>
        <p>Automated Code Analysis System</p>
      </header>

      <main className="App-main">
        <div className="controls">
          <div className="control-group">
            <label>Select Satellite:</label>
            <select
              value={selectedSatellite}
              onChange={(e) => handleSatelliteChange(e.target.value)}
            >
              <option value="">Choose satellite...</option>
              {satellites.map(satellite => (
                <option key={satellite.name} value={satellite.name}>
                  {satellite.name} ({satellite.languages.length} languages)
                </option>
              ))}
            </select>
          </div>

          {currentSatellite && (
            <div className="control-group">
              <label>Select Language:</label>
              <select
                value={selectedLanguage}
                onChange={(e) => setSelectedLanguage(e.target.value)}
              >
                <option value="">Choose language...</option>
                {currentSatellite.languages.map(language => (
                  <option key={language} value={language}>
                    {language}
                  </option>
                ))}
              </select>
            </div>
          )}

          <div className="buttons">
            <button
              onClick={generateReport}
              disabled={loading || !selectedSatellite || !selectedLanguage}
            >
              {loading ? 'Generating...' : 'Generate Report'}
            </button>
            <button
              onClick={generateAllReports}
              disabled={loading}
              className="secondary"
            >
              {loading ? 'Generating...' : 'Generate All Reports'}
            </button>
          </div>
        </div>

        {error && <div className="error">{error}</div>}

        {report && (
          <div className="report">
            <h2>Report: {report.satellite} - {report.language}</h2>
            <div className="report-meta">
              <span>Status: {report.status}</span>
              <span>Files: {report.file_count}</span>
              <span>Generated: {new Date(report.timestamp).toLocaleString()}</span>
            </div>
            <div className="report-content">
              <pre>{report.content}</pre>
            </div>
          </div>
        )}

        <div className="analytics-section">
          <h2>Analytics Dashboard</h2>

          <div className="charts-grid">
            <div className="chart-card">
              <h3>Language Distribution</h3>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={languageData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="files" fill="#8884d8" name="Files" />
                  <Bar dataKey="reports" fill="#82ca9d" name="Reports" />
                </BarChart>
              </ResponsiveContainer>
            </div>

            <div className="chart-card">
              <h3>Satellite Status</h3>
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={statusData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {statusData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>

            <div className="chart-card">
              <h3>Report Generation Timeline</h3>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={timelineData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="reports" stroke="#8884d8" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>
        </div>

        <div className="satellites-overview">
          <h2>Available Satellites</h2>
          <div className="stats-grid">
            <div className="stat-card">
              <h3>{satellites.length}</h3>
              <p>Total Satellites</p>
            </div>
            <div className="stat-card">
              <h3>{satellites.reduce((sum, s) => sum + s.languages.length, 0)}</h3>
              <p>Total Languages</p>
            </div>
            <div className="stat-card">
              <h3>{report ? '1' : '0'}</h3>
              <p>Reports Generated</p>
            </div>
          </div>
          <div className="satellites-grid">
            {satellites.map(satellite => (
              <div key={satellite.name} className="satellite-card">
                <h3>{satellite.name}</h3>
                <p>Languages: {satellite.languages.join(', ')}</p>
                <span className={`status ${satellite.enabled ? 'enabled' : 'disabled'}`}>
                  {satellite.enabled ? 'Active' : 'Inactive'}
                </span>
              </div>
            ))}
          </div>
        </div>
      </main>
    </div>
  );
}

export default App;
