#!/usr/bin/env python3
"""
Team Persia Reports Generator
Automated analysis and report generation for code satellites.
"""

import os
import json
import datetime
from pathlib import Path
import argparse

class ReportGenerator:
    def __init__(self, config_path="config.json"):
        self.config = self.load_config(config_path)
        self.base_dir = Path(__file__).parent

    def load_config(self, config_path):
        """Load configuration from JSON file."""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return self.get_default_config()

    def get_default_config(self):
        """Return default configuration."""
        return {
            "satellites": {
                "Persi": {
                    "Python": {"enabled": True, "extensions": [".py"]},
                    "JavaScript": {"enabled": True, "extensions": [".js", ".mjs"]},
                    "TypeScript": {"enabled": True, "extensions": [".ts", ".tsx"]},
                    "Java": {"enabled": True, "extensions": [".java"]},
                    "CSharp": {"enabled": True, "extensions": [".cs"]}
                }
            },
            "report_template": {
                "title": "Analysis Report: {satellite} {language} Satellite",
                "sections": ["Satellite Status", "Summary", "Next Steps"]
            }
        }

    def analyze_codebase(self, satellite, language):
        """Analyze codebase for given satellite and language."""
        satellite_dir = self.base_dir / satellite / language
        if not satellite_dir.exists():
            return {"status": "Directory not found", "file_count": 0}

        extensions = self.config["satellites"][satellite][language]["extensions"]
        files = []
        for ext in extensions:
            files.extend(satellite_dir.glob(f"**/*{ext}"))

        return {
            "status": "Analysis Complete",
            "file_count": len(files),
            "extensions": extensions
        }

    def generate_report(self, satellite, language):
        """Generate markdown report for satellite and language."""
        analysis = self.analyze_codebase(satellite, language)

        timestamp = datetime.datetime.now().isoformat()
        template = self.config["report_template"]

        report_content = f"""# {template['title'].format(satellite=satellite, language=language)}
## Generated: {timestamp}

### Satellite Status
- **Watcher**: {satellite}
- **Language**: {language}
- **Status**: {analysis['status']}
- **Files Analyzed**: {analysis['file_count']}

### Summary
Automated analysis and report generation completed successfully.

### Next Steps
- Review generated reports
- Sync with GitHub if needed
- Deactivate satellite when done

---
*Generated by Workflow Engine*
"""

        return report_content

    def save_report(self, satellite, language, content):
        """Save report to appropriate location."""
        report_path = self.base_dir / satellite / language / "Report.md"
        report_path.parent.mkdir(parents=True, exist_ok=True)

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(content)

        print(f"Report saved: {report_path}")

    def run_analysis(self):
        """Run analysis for all enabled satellites and languages."""
        for satellite, languages in self.config["satellites"].items():
            for language, settings in languages.items():
                if settings.get("enabled", False):
                    print(f"Analyzing {satellite}/{language}...")
                    report = self.generate_report(satellite, language)
                    self.save_report(satellite, language, report)

def main():
    parser = argparse.ArgumentParser(description="Generate Team Persia Reports")
    parser.add_argument("--config", default="config.json", help="Path to config file")
    args = parser.parse_args()

    generator = ReportGenerator(args.config)
    generator.run_analysis()
    print("All reports generated successfully!")

if __name__ == "__main__":
    main()